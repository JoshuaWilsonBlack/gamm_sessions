---
title: "GAMMs Session 4"
subtitle: "By-Factor Smooths and Reporting GAMMs"
author: "Joshua <span style='font-variant: small-caps;'>Wilson Black</span>"
institute: "Te Kāhui Roro Reo | New Zealand Institute of Language, Brain and Behaviour <br/> Te Whare Wānanga o Waitaha | University of Canterbury"
format:
  revealjs:
    theme: [custom.scss]
    incremental: true
    logo: images/NZILBB-small.svg
    df-print: paged
    title-slide-attributes:
      data-background-image: ../images/NZILBB-big.svg
      data-background-position: 'top left'
      data-background-size: 50%
bibliography: 
  - grateful-refs.bib
  - ../../stat_workshops.bib
editor: 
  markdown: 
    wrap: 72
execute: 
  echo: true
---

```{r}
#| echo: false
library(tidyverse)
library(here)
library(parallel)
library(mgcv)
library(itsadug)
library(gratia)

theme_set(theme_bw())

# Load last weeks data behind the scenes
price <- read_rds(here('data', 'price_anon.rds'))

price_filtered <- price |> 
  filter(
    between(f1, f1_lower, f1_upper),
    between(f2, f2_lower, f2_upper),
    syllables_per_sec < 10,
    following_voiceless == FALSE # filtering step used in paper.
  ) |> 
  mutate(
    sex = factor(sex),
    speaker_anon = factor(speaker_anon),
  ) |> 
  # create identifier for each trajectory.
  group_by(speaker_anon) |> 
  mutate(
    traj_no = cumsum(measurement_no <= lag(measurement_no, default = 11)),
    traj_id = paste0(speaker_anon, '_', traj_no),
    traj_id = factor(traj_id)
  ) |> 
  ungroup()

# make a subset of the data so that it can be fit on a laptop. Just keep 
# the first three trajectories and 30% of the speakers. We want some early
# and some later speakers.
early_speakers <- price |> 
  filter(yob < 1900) |> 
  pull(speaker_anon) |>
  unique()

mid_speakers <- price |> 
  filter(between(yob, 1900, 1950)) |> 
  pull(speaker_anon) |>
  unique()

late_speakers <- price |> 
  filter(yob > 1950) |> 
  pull(speaker_anon) |>
  unique()

speakers_to_keep <- c(
  sample(early_speakers, size = 50),
  sample(mid_speakers, size = 50),
  sample(late_speakers, size = 50)
)

price_filtered <- price_filtered |> 
  filter(
    speaker_anon %in% speakers_to_keep,
    traj_no <= 3
  )
```


## Overview

1. Recap
2. By-Factor Smooths
3. Reporting GAMMs
   
# Recap

## Sessions 1-3

1. Fitting GAMMs
2. Adding Random Effects
3. Model Comparisons & Autocorrelation

# By-Factor Smooths

## By-Factor Smooths

- We've seen [by-factor smooths]{.red}: `s(x_1, by = x_2)`.
- We've heard about 'difference smooths'.
- Let's look at the three approaches to smooths across factor levels.
- Relevant to RQs of form: Do group X and group Y have distinct patterns of change in measure A over time span T.

## Default Behaviour {auto-animate=TRUE}

::: fragment
```{r}
#| eval: false
fit_by <- gam(
  y ~ x_2 + s(x_1, by = x_2), 
  data=my_data
)
```

:::

- Default behaviour: Separate smooths for each level of `x_2`.
- No explicit measure of _difference between groups_ in the summary.
- When to use: want to capture variation due to `x_2` in model, but not to directly test for difference.

## Difference Smooth {auto-animate=true}


```{r}
#| eval: false
my_data$x_2 <- as.ordered(data$x_2)
fit_diff <- gam(
  y ~ x_2 + s(x_1, by = x_2), 
  data=my_data
)
```



- If `x_2` is an **ordered factor**, `mgcv` does not fit
a smooth for the first level of the factor.
- The smooth terms capture _differences_ between subsequent levels and the reference level.
- More code is required!

## Difference Smooth (cont.) {auto-animate=true}


```{r}
#| eval: false
my_data$x_2 <- as.ordered(data$x_2)
fit_diff <- gam(
  y ~ x_2 + s(x_1) + s(x_1, by = x_2), 
  data=my_data
)
```

- Need to add a smooth for the base level.
- Ordered factors have polynomial contrasts by default.
- Not useful here! 
- Add a line to convert to treatment contrasts.

## Difference Smooth (cont. 2) {.smaller auto-animate=true}

```{r}
#| eval: false
my_data$x_2 <- as.ordered(data$x_2)
contrasts(my_data) <- "contr.treatment"
fit_diff <- gam(
  y ~ x_2 + s(x_1) + s(x_1, by = x_2), 
  data=my_data
)
```


- We can now directly test:
    - statistical significance of `x_2` term.
    - i.e.: is there an across-the-board difference `y` given levels of `x_2`.
    - statistical significance of the `s(x_1, by = x_2)`
    term.
    - i.e.: is there a difference in the "shape" of `s(x_2)` across the levels of `x_2`.
    
## Dummy Diff Smooth

::: fragment
```{r}
#| eval: false
fit_by <- gam(
  y ~ x_2 + s(x_1, by = x_2), 
  data=my_data
)
```
:::

- What if we want to combine the intercept and smooth
term into one test?
- We can do this by creating a [dummy variable]{.red}
- See [@wielingAnalyzingDynamicPhonetic2018].

## Dummy Diff Smooth (cont.)

::: fragment
```{r}
#| eval: false
my_data <- my_data |> 
  mutate(
    level_2 = if_else(my_data$x_2 == "level_2", 1, 0)
  )
```
:::

- Assume `x_2` has two levels: `"level_1"`, `"level_2"`
- Aim: a variable with values $1$, when `x_2 == "level_1"`, otherwise $0$.

## Dummy Diff Smooth (cont. 2) {auto-animate=true}

::: {.fragment}
```{r}
#| eval: false
fit_by <- gam(
  y ~ x_2 + s(x_1, by = level_2), 
  data=my_data
)
```
:::

- A [numeric variable]{.red} in `by=` will *multiply* the smooth.
- `s(x_1, by = level_2) = 0` when `x_2 != "level_2"`.
- So we need a smooth for when `x_2` takes different values.

## Dummy Diff Smooth (cont. 3) {auto-animate=true}

```{r}
#| eval: false
fit_by <- gam(
  y ~ x_2 + s(x_1) + s(x_1, by = level_2), 
  data=my_data
)
```

- A [numeric variable]{.red} in `by=` results in smooths
which are _not_ centred around 0.
- So `s(x_1, by = level_2)` includes both the difference
in shape and the difference in height.
- The parametric term needs to go.

## Dummy Diff Smooth (cont. 4) {auto-animate=true}

```{r}
#| eval: false
fit_by <- gam(
  y ~ s(x_1) + s(x_1, by = level_2), 
  data=my_data
)
```

- Useful for one-coefficient tests of difference between levels.
- Only one line will appear in the summary.
- My terminology: "dummy variable difference smooth". 
- Wieling: "Binary Difference Smooth" vs. "Ordered Factor Difference Smooth".

## More Than Two Levels?

- We've talked about _binary_ differences: often `M`/`F`, or this region vs. that. 
- Additional levels are no problem.
    - Default: separate smooths for each level.
    - Difference smooth: smooths fit wrt. reference level.
    - Dummy var difference smooths: create new dummy variables for each additional level.
    
# Reporting GAMMs

## Main Text vs. Supplementary {.smaller}

- All projects should make clear:
    1. How did you fit the GAMM(s)?
    2. How did you interpret/evaluate them?
      - What are the plots?
      - Where do any p-values come from?
- This can be distributed across the text of a journal article and in supplementary materials.
- Judgement depends on word length and focus.
- Examples given at <https://nzilbb.io/statistics_workshops>.
- Often discussion will include description of patterns in plots.

## Reporting Advice {.smaller}

- Details required:
    - Model formulae
    - Function used to fit (`bam` vs `gam` etc)
    - If relevant, difference smooth structure.
    - Visualisations used to interpret or evaluate.
- Ideal: anonymised data and full code to generate everything
reported in the paper, including plots. Diagnostic plots in 
supplementary material.
- Cite specific packages. e.g., `mgcv`, `gratia`, `itsadug`. 
    - use, e.g., `citation('mgcv')` etc, to determine what to cite.


# What Now?

## What Now? {.smaller}
- **Now:** `usethis::use_course('nzilbb/gamm_sessions')`, `session_4.R`.
- **Next:**
    - _First_ : a session on building an academic website with Quarto.
    - _Then:_ two options:
        1. Guided read-through of [_Regression Modelling for Linguistic Data_](https://github.com/msonderegger/rmld-v1.1) (Morgan Sonderegger).
        2. Watch-and-code sessions following [_Statistical Rethinking_](https://www.youtube.com/playlist?list=PLDcUM9US4XdPz-KxHM4XHt7uUVGWWVSus), an
        introduction to Bayesian Modelling.
- **Anytime:** suggestions are welcome!

# References

```{r}
#| echo: false
grateful::nocite_references(
  grateful::cite_packages(output = "citekeys", out.dir = here())
)
```


::: refs

:::
